#!/usr/bin/env bash

cd "$(dirname "$0")"
DOTFILES_ROOT="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
source "$DOTFILES_ROOT/shared.sh"

# HELP.

Help () {
   # Display Help
  echo "Usage: '$0 [-r] NAME... | -c | -h'"
  echo "Set-up machine by running one or more install scripts."
  echo ""
  echo "options:"
  echo " (none)  Each NAME is the name of an app folder in the dotfiles repo"
  echo "         root."
  echo "         Runs the install script in each app folder (in specified order)."
  echo "         Example: '$0 utils nerdfonts'"
  echo "         Runs install scripts in 'utils' and 'nerdfonts' folders."
  echo ""
  echo "   -r    Each NAME is the name of a text file in the dotfile repo root"
  echo "         containing app names. (One app name per line.) Runs the"
  echo "         install script in each app folder (in specified order)."
  echo "         Example: '$0 -r part1'"
  echo "         Runs install scripts of the apps in the text file 'part1'."
  echo ""
  echo "   -c    Check; displays the app folder names available to install, and"
  echo "         checks which do not yet have an install script."
  echo "         Also checks which app folders are included in a 'partx' (with x"
  echo "         a number) text file, and which not."
  echo ""
  echo "   -h    Display this Help."
}

Error () {
  echo "Usage: '$0 [-r] NAME...'"
  echo "Try '$0 -h' for more information."
  exit 1
}


Check () {

  echo "The following app folders have been found. The yes/no column indicates if the app has an install script; if yes, it can be used as an arguments to this installation script (see '$0 -h'). The next column shows the text files in which this app is included. Finally, any errors (no install script, and/or not present in exactly one file) are shown." 

  for path in "$DOTFILES_ROOT"/*/; do
    
    app="$(basename "$path")"
    if [[ $app = "secrets" ]]; then
      continue
    fi
    errortext=()
    
    # Check if has installer
    if [ -f "$path/install.sh" ]; then
      hasinstaller="${G}yes${N}"
      ok1=true
    else
      hasinstaller="${R} no${N}"
      ok1=false
      errortext+=("${R} no installer${N}")
    fi
    
    # Check if included in a file
    files=()
    IFS=$'\n'
    for line in $(grep -x "$app" "$DOTFILES_ROOT"/part* -s); do
      file="$(basename "$(echo "$line" | cut -d ":" -f 1)")"
      value=$(echo "$line" | cut -d ":" -f 2)
      if [[ $(echo "$value" | wc -w) -eq 1 ]]; then
        files+=("$file")
      fi
    done
    unset IFS
    if [[ "$(echo "${#files[@]}")" -eq 0 ]]; then
      errortext+=("${R} not included in any file${N}")
      ok2=false
    elif [[ "$(echo "${#files[@]}")" -ge 2 ]]; then 
      ok2=false
      errortext+=("${R} included in multiple files${N}")
    else
      ok2=true
    fi
    
    # Print
    errortext=$(IFS=";\ " ; echo "${errortext[*]}")
    finaltext="$(printf '%-20s %-10s %-20s %-20s\n' "$app" "$hasinstaller" "${files[*]}" "$errortext";)"
    if [[ "$ok1" = true && "$ok2" = true ]]; then
      success "$finaltext"
    else
      fail "$finaltext"
    fi
  done
}
 
# FUNCTIONS USED IN MAIN PROGRAM.

install_from_files () {
  # check if all files exist
  filepaths=()
  for filename in "$@"; do
    filepath="$(realpath $filename)"
    if [ ! -f "$filepath" ]; then
      fail "$filepath does not exist or is not a file" 
      exit 1
    else
      filepaths+=("$filepath")
    fi
  done
  # execute all
  for filepath in "${filepaths[@]}"; do
    install_from_file "$filepath"
  done
}

install_from_file () {
  echo ''
  echo "Processing file $1"
  echo ''
  
  apps=""
  while read line; do
    [[ $line =~ ^#.* ]] && continue
    apps+=" $line"
  done <<< $(cat "$1")
  install_apps $apps
}

install_apps () {
  # check if all app folders exist
  folderpaths=()
  for foldername in "$@"; do
    folderpath="$DOTFILES_ROOT/$foldername"
    installer="$folderpath"/install.sh
    installerpath="$(realpath $installer)"
    echo $installerpath

    if [ ! -f "$installerpath" ]; then
      fail "$installerpath does not exist"
      exit 1
    else
      folderpaths+=("$folderpath")
    fi
  done
  # execute all
  for folderpath in "${folderpaths[@]}"; do
    install_app "$folderpath"
  done
}

install_app () {
  # Run the install script in a folder, i.e., in ./$1/install.sh

  local folderpath="$1"
  local foldername=$(basename "$folderpath")
  success   "┌── $foldername ─── start ────┐"
  cd "$folderpath"
  ./install.sh

  if [ $? -eq 0 ]
  then
    success "└── $foldername ─── \033[0;32msuccess\033[0m ──┘"
    successfully+=("$foldername")
  else
    fail    "└── $foldername ─── \033[0;31merror\033[0m ────┘"
    failure+=("$foldername")
  fi
}

# PARSE ARGUMENTS.

# No arguments: error
if [ $# -eq 0 ]; then 
  echo "Error: no arguments"
  Error
fi

# Get options
read_files=false
while getopts ":rhc" opt; do
  case $opt in
    c) # display available folders
      Check
      exit
      ;;
      
    h) # display help
      Help
      exit
      ;;

    r)
      read_files=true
      ;;
    
    *)
      echo "Error: invalid option."
      Error
      ;;
  esac
done
shift $((OPTIND - 1))

# PREPARE.

successful=()
failure=()

# DO ACTUAL WORK.

if [ "$read_files" = false ]; then
  install_apps "$@"
else
  install_from_files "$@"
fi

# SUMMARY.

echo ''
if [ ${#successfully[@]} -gt 0 ]; then
  echo "Summary: successfully finished"
  for foldername in "${successfully[@]}"; do
    success "$foldername"
  done
fi
if [ ${#failure[@]} -gt 0 ]; then
  echo "Summary: ran into error"
  for foldername in "${failure[@]}"; do
    fail "$foldername"
  done
fi
echo "Check for to-do items"
todo "In output above, check for lines starting with [\033[0;36m\033[1mTODO\033[0m]. They indicate to-do items, like (private) files or folders that must still be created."
